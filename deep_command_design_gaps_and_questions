# Deep Command - Design Gaps & Open Questions
## Analysis of Documentation Completeness

**Document Version**: 1.0  
**Date**: October 10, 2025  
**Status**: Pre-Implementation Review

---

## Executive Summary

This document identifies critical gaps, unanswered questions, and areas requiring further definition in the Deep Command design documentation before implementation can proceed. Items are prioritized by their impact on core systems and development timeline.

**Priority Legend**:
- ðŸ”´ **Critical**: Blocks implementation of core systems
- ðŸŸ¡ **High**: Needed early in development
- ðŸŸ¢ **Medium**: Can be defined during development
- âšª **Low**: Polish and refinement stage

---

## Table of Contents

1. [Critical Gaps (Block Implementation)](#critical-gaps-block-implementation)
2. [High Priority Gaps](#high-priority-gaps)
3. [Medium Priority Gaps](#medium-priority-gaps)
4. [Documentation Inconsistencies](#documentation-inconsistencies)
5. [Implementation Recommendations](#implementation-recommendations)

---

## Critical Gaps (Block Implementation)

### ðŸ”´ 1. Excavation System Mechanics

**Current State**: Mentioned as "grid-based digging" but implementation details missing.

**Open Questions**:
- **Designation System**: How do players order excavation?
  - Tile-by-tile clicking?
  - Area designation (drag to select region)?
  - Auto-excavation adjacent to existing areas?
- **Worker Behavior**: 
  - Do workers automatically claim excavation tasks?
  - Can players manually assign specific workers?
  - Priority system for multiple excavation zones?
- **Material Properties**:
  - Soft earth, rock, reinforced stone mentioned but no multipliers
  - What are the actual time differences? (e.g., rock = 2x time?)
  - Do materials affect tool requirements or just time?
- **Excavation States**:
  - Is it instant when worker arrives, or progressive?
  - Visual progression states needed?
  - Can excavation be paused/resumed?
- **Failure States**:
  - Can excavation cause cave-ins?
  - Structural integrity concerns? (Docs say no, but confirm)
  - Worker injury during excavation?
- **Equipment Requirements**:
  - Do excavators need specific tools?
  - Tool durability/maintenance?
  - Upgrade path for better excavation tools?

**Why This Blocks Implementation**: Core gameplay loop depends on excavation. Can't build base without knowing how digging works.

**Recommendation**: Define excavation as highest priority. Create detailed specification document covering designation UI, worker task selection algorithm, and progression system.

### ðŸ”´ 1.1 Excavation System Mechanics - Defined

## System Overview

### Designation Phase

#### Blueprint Creation
- Click and drag to mark rectangular areas for room construction
- Right-click and drag to remove designations (un-designate)
- Multiple editing passes allowed before confirmation

#### Validation Requirements
- **Corridor Connection**: Rooms must connect to existing corridor network
- **Contiguous Area**: Marked tiles must form a single connected region
- **Layer Compatibility**: Room type must be valid for current layer

#### Visual Feedback

**Valid Layout**: Blue overlay on designated tiles

**Invalid Layout**: Red overlay on problematic tiles
- If not connected to corridor: entire room is red
- If non-contiguous: disconnected sections are red
- If overlapping with existing structures: overlapping tiles are red

**Ready Button**: Appears when layout is valid, allows confirmation

---

## Construction Phase

Once the "Ready" button is clicked:

### 1. Visual State Change
- Blueprint area becomes "tarped off" with construction tent overlay
- Visual indication that work is in progress
- Construction progress indicator appears

### 2. Worker Behavior
Workers automatically claim construction tasks from queue

Priority based on:
- Player-set priority flags (if implemented)
- Proximity to available workers
- Task age (older tasks prioritized)

Multiple workers can collaborate on large rooms

### 3. Supply Gathering
Workers automatically path to:
- Storage rooms containing required supplies
- Surface delivery point if supplies insufficient

Supply mechanics:
- Supplies are "reserved" when worker claims task
- Workers transport supplies to construction site

### 4. Construction Progression
Progressive visual changes under construction tent

Percentage completion based on:
- Supply delivery progress
- Worker time investment
- Room size (larger = longer construction)

Can be paused if workers reassigned or supplies run out

### 5. Completion
- Construction tent disappears
- Room foundation/floor appears
- Room is now ready for furniture/equipment placement
- Room begins consuming power/life support

---

## Material Properties

### Material Types
Soft earth, rock, reinforced stone are *visual flavor only*
- Affect excavation aesthetic (different tile textures)
- No gameplay impact on construction time
- All rooms take same base time modified by size and worker count

### Time Calculation
```
Construction Time = (Room Size in Tiles Ã— Base Time per Tile) / Worker Count

Base Time per Tile = 2 seconds (configurable)
Worker efficiency affected by skill level and morale
```

---

## Construction States

| State | Description |
|-------|-------------|
| **Designated** | Blueprint marked, awaiting confirmation |
| **Validated** | Blueprint confirmed valid, ready button available |
| **Confirmed** | Ready button pressed, construction tent appears |
| **In Progress** | Workers actively gathering supplies and building |
| **Paused** | Insufficient supplies or workers, progress halted |
| **Completed** | Room functional, ready for furnishing |

---

## Failure Handling

- **Cave-ins**: None - structural integrity is abstracted away
- **Worker Safety**: No injury risk during construction
- **Supply Shortages**: Construction pauses, resumes when supplies delivered
- **Cancellation**: 
  - Can cancel during any phase before completion
  - Refund policy: 50% of invested supplies returned
  - Workers drop task and become available

---

## Special Cases

### Corridor System

**Player-Defined**: Corridors are designated exactly like rooms
- Players must explicitly designate corridor space to connect rooms
- Corridors are a special "room type" with minimal construction cost
- Strategic placement matters - corridors affect traffic flow and access
- **Starting Corridor**: Games begin with a small corridor connected to surface/elevator
- **Validation**: Rooms must have at least one tile adjacent to a corridor tile

### Elevator Integration

- Elevator doors count as valid connection points
- Rooms and corridors can connect to elevator entryway tiles directly
- Players must build corridors from elevators to rooms on each layer

### Multi-Layer Considerations

- Each layer has independent room network
- Elevators provide vertical corridor connections
- Cannot designate rooms overlapping with layer above/below structures

---

## Equipment Requirements

- **No Special Tools**: Workers don't need excavation equipment
- **No Durability**: Construction is abstracted, no tool wear
- **Upgrade Path**: Worker skill upgrades affect construction speed, not tools

---

## Player Controls

| Control | Function |
|---------|----------|
| **Blueprint Mode Toggle** | Enter/exit blueprint placement mode |
| **Room Type Selection** | Choose room type before designation (affects size constraints) |
| **Priority Flags** | (Optional) Mark construction tasks as high/low priority |
| **Cancellation** | Right-click construction tent to cancel and refund partially |

---

## UI Elements

- **Blueprint Overlay**: Semi-transparent blue/red tiles during designation
- **Construction Tent**: Visual indicator during build phase
- **Progress Bar**: Shows completion percentage on construction sites
- **Supply Requirements**: Tooltip shows needed supplies and current availability
- **Validation Messages**: Clear feedback on why blueprint is invalid

---

## Implementation Priority

**CRITICAL** - This is the foundation of base building gameplay.

### Technical Requirements

- Flood-fill algorithm for contiguity validation
- Pathfinding check for corridor connectivity
- Construction task queue system
- Supply reservation system
- Multi-worker collaboration logic

---

### ðŸ”´ 2. Elevator Implementation Details

**Current State**: Described as "primary vertical transportation" but physical and mechanical details undefined.

**Open Questions**:

#### Physical Properties
- **Size**: "1-tile or multi-tile (exact size TBD)"
  - This fundamentally affects base layout planning
  - Suggestion: 1x1 for simplicity, 2x2 for visual prominence
- **Visual Design**:
  - Single shaft with moving platform?
  - Multiple cars in one shaft?
  - External vs. internal design?
- **Placement Grid**:
  - Snaps to tile grid or free placement?
  - Can elevators share tiles with other objects?

#### Functional Mechanics
- **Capacity System**:
  - How many units can board simultaneously?
  - Queue behavior when at capacity?
  - Priority system (heroes vs. minions)?
- **Travel Time**:
  - Constant time per layer?
  - Scales with distance (1 layer = 2s, 5 layers = 10s)?
  - Loading/unloading time?
- **Pathfinding Integration**:
  - How does A* algorithm find elevator routes?
  - Cost calculation for using elevators?
  - Multiple elevator preference algorithm?
- **Power Dependency**:
  - Complete failure when unpowered?
  - Emergency backup power?
  - Manual cranks for emergency use?
- **Failure Handling**:
  - Units stuck in elevator during power loss?
  - Emergency escape mechanism?
  - Repair requirements when damaged?

#### Strategic Implications
- **Alternative Movement**:
  - Are elevators the ONLY vertical movement method?
  - Should emergency stairs exist as backup?
  - Vents/shafts for stealth/emergency?
- **Multiple Shaft Strategy**:
  - Incentives for redundancy?
  - Cost balance to prevent spam?
  - Security implications (isolated sections)?

**Why This Blocks Implementation**: Elevator placement is core to base design. Size and mechanics affect grid system, pathfinding, and player strategy.

**Recommendation**: Define elevator size first (suggest 1x1 for MVP). Then specify capacity and travel time formulas. Document pathfinding integration points.

# ðŸ”´ 2.1 Elevator Implementation Details - ANSWERED

## Physical Properties

### Size
**Answer**: 2x2 tiles
- Provides visual prominence without overwhelming the grid
- Makes elevator placement a meaningful spatial decision
- Each elevator occupies 4 tiles per layer

### Visual Design
**Answer**: Single shaft with moving platform
- **Design**: Floor platform with three solid walls and center-opening doors
- **Rendering**: Only displays on the currently viewed layer (not rendered through multiple layers simultaneously)
- **Construction**: Built by placing elevator sections at the same 2x2 location across multiple layers
- **Visual simplicity**: Clean, functional design without decorative elements

### Placement Grid
**Answer**: Snaps to tile grid
- Must align to even coordinates (2x2 requirement)
- Cannot share tiles with other objects (exclusive tile occupation)
- Requires identical 2x2 placement on each connected layer to form shaft

---

## Functional Mechanics

### Capacity System
**Answer**: [TBD - Needs decision]
- **Suggested**: 4 units (1 per tile) for consistency with 2x2 size
- **Queue behavior**: FIFO (first-in-first-out) when at capacity
- **Priority system**: No priority initially (first-come-first-served)
  - Enemies can board but cannot call/request elevator
  - Heroes and minions use same queue system

### Travel Time
**Answer**: [TBD - Needs decision]
- **Suggested formula**: 1 second per layer traveled
- **Loading time**: [TBD] - Recommend 0.3-0.5s per passenger
- **Total time calculation**: (layers Ã— travel_time) + (passengers Ã— loading_time)
- **Example**: Moving 3 layers with 2 passengers = (3 Ã— 1s) + (2 Ã— 0.5s) = 4 seconds

### Pathfinding Integration
**Answer**: Treated as special node in pathfinding graph
- **A* Integration**: Elevator entrances are connection nodes between layers
- **Cost calculation**: Base cost + (estimated_travel_time Ã— time_penalty_factor)
- **Multi-elevator logic**: Pathfinding selects nearest available elevator to desired route
- **Availability check**: Only includes elevators in "functioning" state (not player-halted)

### Power Dependency
**Answer**: Not power-dependent (always functional unless manually halted)
- **No power requirement**: Elevators do not consume power or fail when unpowered
- **Justification**: Prevents soft-locks and unrecoverable game states
- **Manual control**: Player can temporarily halt elevator operation via UI control

### Failure Handling
**Answer**: Elevators cannot be destroyed or fail
- **Damage immunity**: Indestructible by enemies or environmental hazards
- **Player override**: Can be manually halted by player
  - Units attempting to use halted elevator must find alternative routes (ladders)
  - Halted status is toggleable (can be resumed anytime)
- **No repair needed**: Cannot be damaged, no maintenance required

---

## Strategic Implications

### Alternative Movement
**Answer**: Ladders provide secondary vertical movement
- **Elevators**: Fast, high-capacity, passive transport
- **Ladders**: Slower, unit-by-unit climbing, always available
- **Stairs**: Not implemented (design preference for simplicity)
- **Vents/shafts**: Not implemented
- **Justification**: Ladders provide backup without overcomplicating movement systems

### Multiple Shaft Strategy
**Answer**: Multiple elevators encouraged but not required
- **Incentive for redundancy**: 
  - Distribute traffic across facility
  - Multiple defense/choke points against threats
  - Reduced congestion during high-traffic scenarios
- **Cost balance**: [TBD - Needs resource cost definition]
  - Should be affordable enough to build 2-3 in medium base
  - Expensive enough that spamming isn't optimal
- **Security implications**:
  - Each elevator is potential breach route from gate to surface
  - More elevators = more routes to defend
  - Can halt specific elevators to funnel threats into kill zones

---

## Implementation Summary

### Construction System
- Player builds elevator sections at identical 2x2 coordinates across desired layers
- Sections automatically form continuous shaft when vertically aligned
- Each section is separate build action (e.g., 5 layers = 5 build commands at same X,Y)

### Enemy Interaction
- Enemies can pathfind to and use elevators
- Enemies cannot call/request elevator (passive use only)
- Elevator arrives based on friendly unit requests or natural positioning

### Player Controls
- **Manual Halt**: Toggle to stop elevator operation
  - Units cannot board or disembark while halted
  - Halted elevators excluded from pathfinding
- **Visual indicator**: Show elevator status (operational/halted) in UI

---

### ðŸ”´ 3. Power Distribution System

**Current State**: "Power Generator provides energy" but distribution mechanics completely undefined.

**Open Questions**:

#### Distribution Model
- **Propagation Method**:
  - Option A: Radius-based (generator powers everything within X tiles)
  - Option B: Wiring system (manual connections required)
  - Option C: Abstract (generators contribute to global pool, rooms consume)
  - Option D: Hybrid (generators have range, wires extend it)
- **Visual Representation**:
  - Power lines visible in game world?
  - Overlay mode to show powered areas?
  - Color-coding for power levels?
- **Layer Behavior**:
  - Does power propagate between layers?
  - Vertical distribution through elevators?
  - Separate grids per layer?

#### Failure States
- **Power Shortage Behavior**:
  - Instant shutdown of all systems?
  - Priority-based brownout (critical systems stay on)?
  - Gradual degradation?
- **Room-Specific Effects**:
  - Life support fails â†’ oxygen depletion time?
  - Portal chamber unpowered â†’ mission abort?
  - Elevators unpowered â†’ trapped personnel?
  - Research labs â†’ project paused or lost?
- **Recovery Process**:
  - Instant restoration when power returns?
  - Reboot sequence?
  - Damage requiring repair?

#### Storage and Management
- **Battery Reserve System**:
  - How much storage?
  - Auto-backup or manual activation?
  - Discharge rate during outage?
  - Recharge time?
- **Consumption Calculation**:
  - Per-room base cost?
  - Active operation costs (e.g., portal only when in use)?
  - Worker presence multiplier?
- **Expansion Strategy**:
  - Can you over-build power capacity?
  - Penalties for excess capacity (maintenance costs)?
  - Upgrade paths for generators?

**Why This Blocks Implementation**: Every building references "power requirement" but no system exists to manage it. Can't implement buildings without power system.

# ðŸ”´ 3.1 Power Distribution System - ANSWERED

## Distribution Model

### Propagation Method
**Answer**: Option C - Abstract global pool
- **Model**: All power generators contribute to single facility-wide power value
- **No wiring**: No physical connections, cables, or routing required
- **No spatial limitations**: Power available everywhere simultaneously
- **No layer separation**: Single power grid spans entire facility (all layers)
- **UI Display**: Global "Power" value shown in main UI (e.g., "Power: 850/1000")

### Visual Representation
**Answer**: UI-only display, no in-world visualization
- **Main UI**: Single power meter showing Generation/Consumption ratio
- **No power lines**: No visual wiring or connections in game world
- **No overlay mode**: Power is abstract concept, not spatial
- **Room indicators**: Individual rooms may show "Powered/Unpowered" status icon

### Layer Behavior
**Answer**: Single unified grid
- Power does NOT propagate (it's already everywhere)
- No vertical distribution needed
- No separate grids per layer
- All generators contribute equally regardless of layer
- All consumers draw equally regardless of layer

---

## Failure States

### Power Shortage Behavior
**Answer**: Two-stage failure with backup system
1. **Stage 1 - Backup Mode** (Net power < 0):
   - Automatically triggers when consumption exceeds generation
   - **Backup power source**: [TBD - Battery/Capacitor/Emergency Generator?]
   - **Backup capacity**: [TBD - How long does backup last?]
   - **Visual warning**: UI indicator shows "BACKUP MODE" with timer/meter
   
2. **Stage 2 - Total Shutdown** (Backup depleted):
   - All systems shut off simultaneously
   - Remains offline until power restored
   - **Recovery**: Instant restoration when generation exceeds consumption

### Room-Specific Effects
**Answer**: Each room type has unique power loss behavior
- **Examples** (specific effects TBD per room type):
  - **Life Support**: Oxygen depletion countdown starts
  - **Portal Chamber**: Cannot dial gate, active connection severed
  - **Elevators**: [EXCEPTION - Per elevator doc, these remain functional]
  - **Research Labs**: Progress paused (not lost)
  - **Security Systems**: Doors fail to sealed/open state, alarms offline
  - **Lighting**: Facility goes dark (visibility reduction)
  
**Implementation Note**: Each room definition will specify `onPowerLoss()` and `onPowerRestored()` behaviors

### Recovery Process
**Answer**: Instant restoration
- When power generation > consumption, all systems instantly reactivate
- No reboot sequence
- No gradual restoration
- No damage requiring repair (power loss does not damage systems)
- **Exception**: Secondary consequences may persist (e.g., if oxygen fully depleted during outage, personnel still suffocate)

---

## Storage and Management

### Battery Reserve System
**Answer**: Automatic backup mode
- **Activation**: Automatic when net power < 0
- **Capacity**: [TBD - Suggest 30-60 seconds for MVP?]
- **Discharge rate**: [TBD - Constant drain or scales with deficit?]
  - **Option A**: Fixed duration (e.g., 60 seconds regardless of deficit size)
  - **Option B**: Scales with deficit (larger deficit = faster depletion)
- **Recharge**: [TBD - Instant when surplus? Gradual?]
  - **Suggest**: Instant recharge when power positive (simpler)
- **Upgrades**: [TBD - Can player increase backup capacity?]

### Consumption Calculation
**Answer**: Per-room/object static consumption
- **Base model**: Each room/object has fixed power requirement
  - Example: Barracks = 50 power, Lab = 150 power, Portal = 500 power
- **Active operation costs**: [TBD - Do some rooms cost more when in use?]
  - **Suggest MVP**: Fixed costs only (no variable consumption)
  - **Future enhancement**: Portal costs extra when active, labs cost more when researching
- **Worker presence**: [TBD - Do occupied rooms consume more?]
  - **Suggest MVP**: No multiplier (simpler)
  
**Total Consumption** = Sum of all powered-on rooms/objects

### Expansion Strategy
**Answer**: Simple overcapacity model
- **Can you over-build?**: Yes, unlimited generator construction
- **Penalties for excess**: None (encourages safety margin)
- **Benefits of excess**: Backup reserves recharge faster [if gradual recharge implemented]
- **Upgrade paths**: [TBD - Can generators be upgraded or only build more?]
  - **Suggest**: Build more generators only (simpler for MVP)

---

## Player Controls

### Individual Room Control
**Answer**: Per-room power toggle
- Player can manually turn off power to individual rooms
- **Purpose**: Reduce consumption during shortage
- **UI Location**: [TBD - Room info panel? Hover menu?]
- **Default state**: All rooms powered on when built
- **Persistence**: Toggled state persists (doesn't auto-restore)

### Master Power Control
**Answer**: Global emergency shutoff
- **Master switch**: Single UI button to cut power to entire facility
- **Use case**: Intentional shutdown (unclear why player would want this?)
- **Restoration**: Same master switch toggles power back on
- **Effect**: Instant facility-wide shutdown, bypasses backup mode
- **Note**: Distinguish from shortage-induced shutdown vs. manual shutdown in UI

---

## Implementation Summary

### Power System Flow
```
1. Calculate Total Generation: Sum(all generators)
2. Calculate Total Consumption: Sum(all powered-on rooms/objects)
3. Net Power = Generation - Consumption

If Net Power >= 0:
   - Normal operation
   - Backup fully charged
   
If Net Power < 0:
   - Backup Mode active
   - Backup depletes over time
   - Warning displayed
   
If Backup depleted:
   - Total shutdown
   - All rooms trigger onPowerLoss()
   
When Net Power returns to >= 0:
   - Systems instantly restore
   - Backup recharges
   - All rooms trigger onPowerRestored()
```

### UI Requirements
- **Main display**: "Power: [Current Generation] / [Total Consumption]"
- **Backup meter**: Visual indicator of backup remaining (when in backup mode)
- **Warning state**: Clear visual when in backup mode
- **Per-room toggle**: UI element to enable/disable room power
- **Master switch**: Global power on/off button

---

### ðŸ”´ 4. Resource Delivery Mechanics

**Current State**: Supplies, food, medical, and ammunition described as "delivered from surface" but no delivery mechanics defined.

**Open Questions**:

#### Delivery System
- **Trigger Mechanism**:
  - Automatic scheduled deliveries (every X game days)?
  - Manual ordering by player?
  - Auto-order when below threshold?
  - Budget-based allocation?
- **Currency System**:
  - Is there money/credits?
  - Or purely time-gated (free deliveries on schedule)?
  - Mission rewards = currency for procurement?
- **Delivery Point**:
  - Where do resources arrive?
  - Specific receiving room required?
  - Automatically distributed to storage?
  - Manual hauling by workers needed?
- **Delivery Time**:
  - Instant arrival?
  - Transit time from surface?
  - Advance notice before arrival?

#### Storage System
- **Storage Capacity**:
  - Global pool with maximum?
  - Per-room storage (require storage rooms)?
  - Unlimited with diminishing returns?
- **Storage Room Mechanics**:
  - If required, how does "Quarters" capacity work differently from generic storage?
  - Specialized storage for different resource types?
  - Security implications (theft/sabotage)?
- **Resource Location**:
  - Can resources be stored anywhere?
  - Must be transported to point of use?
  - Abstract "available to all" system?

#### Supply Chain Disruption
- **Interruption Scenarios**:
  - Can surface supply lines be cut (story events)?
  - Enemy interference?
  - Political/budget reasons?
- **Contingency Planning**:
  - Stockpiling strategy?
  - Alternative acquisition (portal trade)?
  - Rationing system during shortage?
- **Spoilage and Decay**:
  - Do food supplies expire?
  - Medical supplies degrade?
  - Time limits on stored resources?

#### Exotic Materials
- **Unique Acquisition**:
  - Only from portal missions (confirmed)
  - Processing/refinement required?
  - Storage requirements different from standard resources?
- **Usage**:
  - Direct building material?
  - Research input?
  - Trade commodity?

**Why This Blocks Implementation**: Resource system is fundamental. UI shows resource counts but no backend system. Can't implement construction costs or consumption without delivery mechanics.

# ðŸ”´ 4.1 Resource Delivery Mechanics - ANSWERED

## Delivery System

### Trigger Mechanism
**Answer**: Player-initiated purchases with visible budget
- **Purchasing model**: Player manually orders supplies using budget
- **UI**: Purchase menu showing available supplies and costs
- **Delivery trigger**: Ordered supplies arrive via truck at surface
- **Budget tracking**: Visible currency amount in UI (e.g., "Budget: $50,000")
- **No physical money**: Budget is abstract number, not stored as items in base

### Currency System
**Answer**: Visible abstract budget
- **Budget display**: Always visible in main UI
- **Income sources**: [TBD - How does player earn money?]
  - Mission rewards?
  - Periodic government funding?
  - Research/artifact sales?
- **Expenditures**: Manual supply purchases by player
- **No cash storage**: Money never physically enters the base (unlike Evil Genius briefcases)

### Delivery Point
**Answer**: Surface delivery zone
- **Surface staging area**: Dedicated zone where trucks unload
- **Temporary storage**: Crates accumulate until minions move them
- **Not automatically distributed**: Requires minion hauling to storage rooms
- **Visual capacity**: [TBD - How many crates can pile up at surface?]

### Delivery Time
**Answer**: [TBD - Instant or delayed?]
- **Option A**: Instant arrival when purchased (simplified)
- **Option B**: Transit time after purchase (e.g., 30-60 seconds for truck to arrive)
- **Recommend**: Transit time adds realism and planning requirement

---

## Storage System

### Storage Capacity
**Answer**: Specialized storage rooms required
- **Storage rooms**: Player must build dedicated storage facilities
- **Room types**: [TBD - Single "Storage Room" or multiple types?]
  - **Option A**: Generic "Storage Room" holds all supply types
  - **Option B**: Specialized rooms (Food Storage, Armory, Medical Bay, etc.)
  - **Option C**: Hybrid (Generic storage + optional specialized for bonuses?)
- **Capacity per room**: [TBD - How many crates per storage room?]
  - Visual limit based on room size (2x2 room = 4 crates? 3x3 = 9 crates?)

### Storage Room Mechanics
**Answer**: Physical crate storage with visual representation
- **Crates visible**: Storage rooms visually fill with crate models
- **Capacity limits**: Each storage room has maximum crate count
- **Visual feedback**: Player can see at a glance how full storage is
- **Overflow prevention**: Cannot deliver more than storage capacity allows
- **Quarters difference**: [TBD - How do quarters handle food differently?]
  - Do quarters consume from storage, or store their own food?

### Resource Location
**Answer**: Physical crates must be hauled to storage/destination
- **No auto-distribution**: Crates at surface must be manually hauled
- **Minion task**: Workers transport crates from surface â†’ storage rooms
- **From storage to use**: [TBD - Are crates then hauled from storage to rooms that need them?]
  - **Option A**: Construction sites pull from storage (second hauling step)
  - **Option B**: Storage is just for stockpiling, direct surface â†’ construction hauling also works
- **Visual presence**: Crates physically exist in world until consumed

---

## Resource Types

### Supply Categories
**Answer**: [TBD - Generic or specialized crates?]
- **Option A - Generic supplies**:
  - All crates identical
  - Any crate can fulfill any need
  - Simplest implementation
  
- **Option B - Typed supplies**:
  - Building Materials (for construction)
  - Food (for personnel)
  - Medical (for infirmary)
  - Ammunition (for armory)
  - Different crate visuals per type
  
- **Option C - Hybrid**:
  - Generic "Supplies" for most things
  - Specialized types only for specific needs (food, medical)

**Recommend**: Option A (generic) for MVP, expand to types later

### Crate Visual Representation
**Answer**: Physical 3D objects in game world
- **Model**: Standard crate 3D model(s)
- **Stacking**: [TBD - Do crates stack visually or spread across floor?]
- **Placement**: [TBD - Snap to grid or free-placed by system?]
- **Consumption**: Crates disappear when consumed (construction complete, food eaten, etc.)

---

## Supply Chain Disruption

### Interruption Scenarios
**Answer**: [TBD - Can deliveries be disrupted?]
- **Budget depletion**: Player runs out of money (cannot purchase)
- **Story disruptions**: [Optional] Surface attacks cut supply lines
- **Political consequences**: [Optional] Funding reduced due to failures
- **Recommend**: Budget management only for MVP

### Contingency Planning
**Answer**: Strategic stockpiling
- **Storage expansion**: Build more storage rooms for larger reserves
- **Budget management**: Balance spending vs. saving for emergencies
- **Portal acquisition**: [TBD - Can supplies be obtained through gate missions?]

### Spoilage and Decay
**Answer**: [TBD - Do resources expire?]
- **No decay**: Crates never spoil (simpler)
- **Food decay**: Food crates expire after X time (more realistic)
- **Recommend**: No decay for MVP

---

## Exotic Materials

### Unique Acquisition
**Answer**: Obtained through portal missions
- **Source**: Returned through gate after off-world missions
- **Arrival point**: [TBD - Gate room itself or surface delivery?]
  - **Recommend**: Arrive at gate room (different from supply deliveries)
- **Visual distinction**: [TBD - Different crate appearance?]
  - Special colored/marked crates for exotic materials

### Usage
**Answer**: Advanced construction and research
- **Building material**: Required for advanced room types
- **Research input**: Used in specific research projects
- **Storage**: [TBD - Store with regular supplies or need special containment?]
  - **Option A**: Standard storage rooms
  - **Option B**: Specialized "Secure Storage" room required
  - **Recommend**: Standard storage for MVP, special later

---

## Construction Supply Flow

### Room Supply Requirements
**Answer**: Construction requires delivered supplies
- **Construction phase**: Rooms need X crates to complete
  - Number varies by room type and size
  - Minions haul from storage (or surface) to construction site
  - Visual: Crates pile up at construction site during build
  
### Operational Supply Consumption
**Answer**: [TBD - Do completed rooms need ongoing supplies?]
- **Option A - Construction only**:
  - Rooms only need supplies during construction
  - Once built, no ongoing consumption
  - Simplest model
  
- **Option B - Operational consumption**:
  - Barracks consume food periodically
  - Armory consumes ammunition when used
  - Medical bay consumes medical supplies treating wounded
  - More realistic, more management
  
**Recommend**: Option A for MVP, Option B as enhancement

---

## Minion Hauling System

### Hauling Behavior
**Answer**: Autonomous worker task system
- **Task assignment**: Workers automatically assigned hauling tasks
- **Priority**: [TBD - Construction > storage > operational?]
- **Pathfinding**: Standard A* to nearest needed crate
- **Visual**: Minion carries crate from point A to point B

### Carry Capacity
**Answer**: [TBD - Crates per minion?]
- **Option A**: One crate per minion (clear visuals)
- **Option B**: Multiple crates per minion (faster logistics)
- **Recommend**: One crate for visual clarity

### Storage Management
**Answer**: Workers distribute to appropriate storage
- **Routing logic**: [TBD - How do workers choose which storage room?]
  - Nearest available storage with capacity?
  - Player-designated primary storage?
  - Balanced distribution across all storage?
- **Overflow**: If all storage full, crates remain at surface

---

## Open Items Requiring Decisions

### Critical (Blocks Implementation)
1. **Income system**: How does player earn money?
2. **Starting budget**: How much money does player start with?
3. **Supply costs**: How much does each crate cost?
4. **Storage room capacity**: How many crates per storage room?
5. **Storage room types**: Generic or specialized?
6. **Crate types**: Generic or specialized (food/medical/ammo)?
7. **Delivery time**: Instant or transit delay?

### Important (Affects Gameplay)
8. **Construction costs**: How many crates per room type?
9. **Operational consumption**: Do rooms consume supplies after built?
10. **Exotic material storage**: Standard or specialized storage?
11. **Hauling priority**: What order do minions prioritize deliveries?

### Enhancement (Post-MVP)
12. **Resource decay**: Do food/medical supplies expire?
13. **Supply disruption**: Can deliveries be blocked by story events?
14. **Portal trade**: Can supplies be obtained through gate?
15. **Storage bonuses**: Do specialized storage rooms provide benefits?

---

## Implementation Summary

### Purchase Flow
```
1. Player opens purchase menu
2. Selects supplies to order (costs budget)
3. Budget deducted immediately
4. [Optional] Transit time delay
5. Truck arrives at surface delivery zone
6. Crates unloaded into surface staging area
```

### Distribution Flow
```
1. Crates sit at surface staging area
2. Workers assigned hauling tasks
3. Workers path to surface, grab crate
4. Workers path to storage room with capacity
5. Crate placed in storage room (visual model)
6. Repeat until surface cleared or storage full
```

### Construction Flow
```
1. Player queues room construction
2. Room requires X crates to complete
3. Workers check storage (or surface) for crates
4. Workers haul crates to construction site
5. Crates pile at site during construction
6. When X crates delivered, construction completes
7. Crates at site disappear (consumed)
```

### Visual Representation
- **Surface**: Pile of crates accumulating at delivery zone
- **In-transit**: Workers carrying individual crates
- **Storage rooms**: Crates visible filling up storage
- **Construction sites**: Crates piling up during build

---

**Status**: Core system framework defined, requires detailed specifications for budget economy, storage capacity values, and resource type decisions

---

### ðŸ”´ 5. Mission Decision System

**Current State**: "Decision points" mentioned as core feature but implementation completely undefined.

**Open Questions**:

#### Decision Generation
- **Frequency**:
  - Time-based intervals (every 5 minutes)?
  - Event-driven (reaching locations, encounters)?
  - Scripted story moments?
  - Random chance per mission segment?
- **Difficulty Scaling**:
  - More decisions in higher difficulty missions?
  - Decision complexity increases with mission progress?
- **Information Quality**:
  - Does intel level affect decision clarity?
  - Partial information vs. full context?
  - False information possible?

#### Decision Mechanics
- **Option Generation**:
  - Always binary choices?
  - Multi-option decisions (3-5 choices)?
  - "Do nothing" always an option?
- **Consequence Resolution**:
  - Dice rolls vs. deterministic outcomes?
  - Hero skill checks influence results?
  - Team composition matters?
  - Equipment affects options available?
- **Feedback**:
  - Immediate result shown?
  - Delayed consequences revealed later?
  - Hidden consequences (unknown until mission ends)?

#### Time Pressure
- **Decision Urgency**:
  - Are decisions timed?
  - What happens on timeout (auto-choose, failure)?
  - Visual countdown?
- **Mission Continuation**:
  - Does game pause during decisions?
  - Can base management continue?
  - Multiple simultaneous mission decisions?

#### Impact Scope
- **Mission Outcomes**:
  - Binary success/fail or graduated results?
  - Partial objective completion?
  - Unexpected bonuses from good decisions?
- **Hero Consequences**:
  - Injury/death possible from decisions?
  - Relationship changes from disagreements?
  - Experience/skill gains from decisions?
- **Long-Term Effects**:
  - Faction reputation changes?
  - Story branching?
  - Future mission availability?

**Why This Blocks Implementation**: Missions are described as core gameplay loop differentiator. Can't build mission system without decision framework.

# ðŸ”´ 5.1 Mission Decision System - ANSWERED

## Decision Generation

### Frequency
**Answer**: Event-Driven (structured mission moments)
- Decisions triggered by mission progress milestones
- Encounter-based (team finds artifact, meets hostile force, discovers technology)
- Structured: 2-4 decision points per mission on average
- Predictable pacing for player
- Scripted story moments at key junctures

### Difficulty Scaling
**Answer**: Higher stakes (same complexity, worse consequences)
- Same number of decisions across difficulty levels
- Higher difficulty = worse consequences for bad choices
- Death/failure more likely on hard missions
- Keeps decision count manageable
- Difficulty affects outcome severity, not decision frequency

### Information Quality
**Answer**: Intel unlocks additional options
- Low intel: 2 basic options presented
- High intel: Additional options appear (3-4 total)
- Better mission preparation = more strategic choices available
- Intel gathering becomes important pre-mission activity
- Example:
  - **Without intel**: "Enter temple?" (Fight or Retreat)
  - **With intel**: "Enter temple?" (Fight, Stealth Entry, Diplomatic Approach, Retreat)

---

## Decision Mechanics

### Option Generation
**Answer**: Variable based on situation
- Simple decisions: 2 options (binary choice)
- Complex decisions: 3-4 options (nuanced scenarios)
- Scales to situation importance and intel level
- "Do nothing" may be explicit option in some scenarios
- Flexibility allows different decision types

### Consequence Resolution
**Answer**: Skill Checks + RNG
- Each option has base success chance (e.g., 60%)
- Hero skills modify chance (+10% per relevant skill level)
- Equipment provides situational bonuses
- Dice roll determines actual outcome
- **Example**: "Sneak past guards" = 40% base + 20% (stealth skill 2) + 10% (cloaking device) = 70% success chance
- Creates strategic depth while maintaining tension/uncertainty

**Success Calculation Formula**:
```
Final Success Chance = Base Chance + (Skill Bonuses) + (Equipment Bonuses)
Roll d100
If roll â‰¤ Final Success Chance: Success
If roll > Final Success Chance: Failure
```

### Team Composition Impact
**Answer**: Yes, heroes and equipment matter significantly

- **Hero skills**: Each hero has relevant skills (combat, science, diplomacy, stealth, engineering, medical, etc.)
- **Skill display**: Options show required/recommended skills
  - "Translate alien text [Science 2+]" 
  - "Negotiate with locals [Diplomacy 1+]"
  - "[Combat 3] - Recommended for high success chance"
- **Equipment bonuses**: Gear provides situational bonuses
  - Ancient artifact detector: +15% to archaeology checks
  - Advanced weapons: +20% to combat options
  - Medical scanner: +10% to diagnosis/treatment decisions
- **Team synergy**: Multiple heroes with same skill stack bonuses
  - 3 heroes with Combat 2 each = stronger combat team than 1 hero with Combat 5

### Feedback
**Answer**: Hybrid (immediate + delayed reveals)
- **Immediate results** for straightforward decisions:
  - "You avoided the trap" (success shown immediately)
  - "The negotiation failed, combat begins" (clear consequence)
- **Delayed reveals** for complex/long-term consequences:
  - "The artifact you retrieved has unexpected properties" (revealed at mission end)
  - "Your actions affected local faction standing" (shown in debrief)
- Best of both worlds: satisfying immediate feedback + suspenseful reveals

---

## Time Pressure

### Decision Urgency
**Answer**: No time limit
- Player takes as long as needed to decide
- No countdown timers or forced choices
- Encourages thoughtful, strategic decision-making
- Better fit for base management game pacing
- Reduces pressure/frustration
- Base management continues while decision pending

### Mission Continuation
**Answer**: Base continues during decision pop-ups

- **Game state**: Base management runs in background
- **Mission pauses**: Mission progress halts until decision made
- **Decision UI**: Modal/overlay shows decision without blocking base
- **Multiple missions**: Can have multiple pending decisions from different missions
  - Each clearly labeled with mission/team identifier
  - Player addresses one at a time from queue
- **Queue system**: Decisions stack if multiple arrive simultaneously

---

## Impact Scope

### Mission Outcomes
**Answer**: Graduated results (success spectrum)

**Success Levels**:
- **Critical Success** (90%+): Primary + bonus objectives, rare items, no casualties, reputation bonus
- **Success** (70-89%): Primary objective complete, team returns safely, standard rewards
- **Partial Success** (50-69%): Objective complete but casualties/setbacks, reduced rewards
- **Failure** (30-49%): Objective failed, team returns (possibly wounded), minimal rewards
- **Critical Failure** (<30%): Objective failed, casualties, negative consequences, reputation loss

**Decision Contribution**:
- Each decision contributes points toward success/failure
- Good decisions: +10 to +25 points
- Bad decisions: -10 to -25 points
- Accumulated score determines final mission outcome tier
- No single decision automatically fails mission (except catastrophic critical failures)

### Hero Consequences
**Answer**: Injury and death possible
- Bad decisions can result in heroes being wounded or killed
- **Permanent consequences**: Dead heroes do not return
- **Injury system**: Wounded heroes out of action for recovery period
- High stakes create careful decision-making
- "Hero down" is serious event requiring player attention
- **Risk indicators**: High-risk decisions clearly marked
- Player accepts consequences of their choices

**Other Hero Effects**:
- **Experience/Skills**: Successful decisions grant XP
  - Relevant skill usage provides bonus XP to that skill
  - Example: Successful diplomacy check gives Diplomacy XP
- **Equipment Loss**: Failed decisions may result in lost/damaged gear
- **Status Effects**: Some decisions may inflict conditions (poisoned, traumatized, etc.)

### Long-Term Effects
**Answer**: Resource and intel gains (no complex branching)
- Decisions primarily affect immediate mission rewards
- **Resource variety**: Good decisions yield better loot/supplies
- **Intel acquisition**: Choices determine what information is learned
- **No faction reputation system** (simplifies for MVP)
- **No story branching** (linear mission progression)
- Focus on tactical decision-making, not long-term political consequences

**Resource/Intel Examples**:
- Good decision: Retrieve advanced technology, gain research data
- Bad decision: Lose equipment, no valuable intel gathered
- Neutral decision: Safe extraction, standard mission rewards

---

## Decision Templates

### Combat Encounter
**Trigger**: Hostile forces detected
**Options**:
- **Fight** [Combat check]
  - Base: 60% | Bonuses: +10% per Combat level, +20% superior weapons
  - Success: Enemies defeated, loot gained
  - Failure: Team injured, possible casualties
- **Sneak Past** [Stealth check]
  - Base: 40% | Bonuses: +10% per Stealth level, +15% cloaking tech
  - Success: Avoid combat, conserve resources
  - Failure: Detected, forced combat at disadvantage
- **Negotiate** [Diplomacy check] *(only with intel)*
  - Base: 50% | Bonuses: +10% per Diplomacy level
  - Success: Peaceful resolution, possible ally
  - Failure: Negotiations break down, combat begins
- **Retreat**
  - Base: 90% (usually succeeds)
  - Success: Safe withdrawal, mission continues with setback
  - Failure: Pursued, must fight while retreating

### Discovery
**Trigger**: Team found ancient device/artifact
**Options**:
- **Take It** [Risk assessment]
  - Base: 60% | Bonuses: +10% per Science level
  - Success: Valuable artifact acquired
  - Failure: Triggered trap/curse, team injured
- **Study In Place** [Science check]
  - Base: 70% | Bonuses: +10% per Science level, +15% scanner equipment
  - Success: Gain intel, safe extraction of data
  - Failure: Inconclusive, time wasted
- **Leave It**
  - Base: 100% (always succeeds)
  - Success: No risk, no reward
- **Destroy It** *(only with intel about danger)*
  - Base: 80% | Bonuses: +10% per Engineering level
  - Success: Threat neutralized, prevents enemy use
  - Failure: Partial destruction, unpredictable effects

### Environmental Hazard
**Trigger**: Path blocked by obstacle (chasm, sealed door, toxic atmosphere, etc.)
**Options**:
- **Force Through** [Strength/Combat check]
  - Base: 50% | Bonuses: +10% per Combat level, +20% explosives/heavy tools
  - Success: Obstacle cleared, path open
  - Failure: Team exhausted/injured, equipment damaged
- **Find Alternate Route** [Exploration]
  - Base: 70% (usually succeeds)
  - Success: Safe bypass found
  - Failure: Longer route, potential additional encounters
- **Use Technology** [Science/Engineering check]
  - Base: 60% | Bonuses: +10% per relevant skill, +15% specialized equipment
  - Success: Clever solution, minimal risk
  - Failure: Equipment malfunction, must try different approach

### Moral Dilemma
**Trigger**: Locals/allies request help that would delay or complicate mission
**Options**:
- **Help Them**
  - Base: 80% | Bonuses: +10% per relevant skill
  - Success: Mission delayed but ally gained, intel/resources provided
  - Failure: Mission delayed, help insufficient, relationship damaged
- **Refuse**
  - Base: 100% (always succeeds tactically)
  - Success: Mission efficiency maintained
  - Failure: N/A (but may create future complications)
- **Compromise**
  - Base: 70% | Bonuses: +10% per Diplomacy level
  - Success: Partial help, balanced outcome, relationship maintained
  - Failure: Neither party satisfied, minor relationship damage

---

## Implementation Summary

### Decision Flow
```
1. Mission progresses off-screen (team traveling/exploring)
2. Event trigger fires (scripted milestone reached)
3. Mission pauses (but base continues operating)
4. Decision pop-up appears in UI
5. Player reviews:
   - Situation description
   - Team composition and skills
   - Available options (2-4 based on intel)
   - Success chance estimates for each option
6. Player selects option (no time pressure)
7. System calculates outcome:
   - Base success chance
   - + Hero skill bonuses (sum of all relevant team skills)
   - + Equipment bonuses
   - = Final success percentage
   - Roll d100
   - Compare to final percentage
8. Immediate result displayed:
   - Success/failure message
   - Direct consequences (injury, loot, intel)
9. Mission continues to next event/completion
10. Mission debrief shows:
    - All decision outcomes
    - Cumulative mission success rating
    - Rewards earned
    - Hero status (alive/injured/dead)
```

### Decision UI Elements
- **Mission Identifier**: "[Alpha Team - Ruins of Kar'tek]"
- **Situation Description**: Context, stakes, current team status
- **Options List**: 2-4 choices with:
  - Action description
  - Required/recommended skills (e.g., [Combat 2+])
  - Estimated success chance percentage
  - Potential consequences preview
- **Team Panel**: 
  - Show all heroes on mission
  - Display relevant skills and current health
  - Highlight which heroes contribute to each option
- **Equipment Panel**: Show gear bonuses applicable to situation
- **Decision History**: Log of previous decisions made this mission (for context)

### Success Chance Display
**Show player transparency**:
- "Sneak Past: 65% chance"
  - Base: 40%
  - Stealth Skill (Hero A: Level 2): +20%
  - Cloaking Device: +5%
- Clear breakdown builds trust in system
- Player understands why chances are what they are

---

## Open Items Requiring Decisions

### Critical (Blocks Implementation)
1. **Base success percentages**: Define default % for each decision template
   - Recommend: 40-70% range for most checks
2. **Skill bonus values**: Confirm +10% per skill level
3. **Equipment bonus values**: How much do items provide? (+5% to +25%?)
4. **Death threshold**: At what failure severity do heroes die vs. just injured?
   - Recommend: Critical failures (roll â‰¤10) = death risk, regular failures = injury

### Important (Affects Balance)
5. **Mission success thresholds**: How many points needed for each outcome tier?
   - Example: 100+ = Critical Success, 70-99 = Success, etc.
6. **Decision point values**: How much does each decision contribute? (+15 good, -15 bad?)
7. **Intel acquisition**: How does player gain intel before missions?
8. **Skill XP gains**: How much XP for successful skill checks?

### Enhancement (Post-MVP)
9. **Hero morale/relationships**: Track team dynamics?
10. **Decision consequences log**: Can player review past mission decisions?
11. **Difficulty multipliers**: How much do consequences scale on hard mode?

---

**Status**: Complete decision system framework defined with event-driven structure, skill-based resolution, and graduated outcomes. Ready for implementation pending numerical balance values.

---

## High Priority Gaps

### ðŸŸ¡ 6. Combat and Security System

**Current State**: Multiple references to "guards," "base defense," and "security" but almost no mechanics defined.

**Critical Missing Elements**:

#### Base Defense
- **Threat Types**:
  - What attacks the base? (Aliens? Enemy factions? Wildlife?)
  - Frequency of attacks?
  - Escalation pattern?
  - Warning system before attack?
- **Entry Points**:
  - Can enemies enter through any excavated tile?
  - Only through surface?
  - Portal backflow events?
  - Saboteurs spawning internally?
- **Combat Resolution**:
  - Real-time or abstracted?
  - Guard stats vs. enemy stats?
  - Casualties and damage?

#### Guard Behavior
- **Patrol System**:
  - Automatic patrol routes?
  - Player-defined waypoints?
  - Smart AI (guards go to threats)?
  - Station-based (guards stay in security office)?
- **Engagement Rules**:
  - Automatic combat on detection?
  - Player approval required?
  - Flee/fight threshold based on odds?
- **Equipment**:
  - Do guards need weapons from armory?
  - Armor/gear requirements?
  - Equipment quality affects combat?

#### Building Damage
- **Destructibility**:
  - Can rooms be destroyed in combat?
  - Partial damage vs. total loss?
  - Repair costs and time?
- **Functional Impact**:
  - Damaged rooms still operate?
  - Power/life support damage cascades?
  - Personnel casualties from room destruction?

#### Security Infrastructure
- **Defensive Buildings**:
  - How do "Automated Defenses" work?
  - Turret placement rules?
  - Force field mechanics?
  - Sensor/detection systems?
- **Security Office Function**:
  - Provides alert visibility?
  - Command post for guard coordination?
  - Required for defense to work?

**Why This Is High Priority**: Security affects base survivability. Defense missions may be mid-game content, but system must be designed early.

### ðŸŸ¡ 6. Combat and Security System - Defined

# Combat and Security System

## Overview

The security system protects the base from hostile incursions through the portal and occasional surface threats. Players build defensive infrastructure, assign guards, configure alert protocols, and watch their security forces respond to threats autonomously.

---

## Threat Model

### Threat Sources

**Portal Incursions** (Primary)
- Hostile aliens with combat capabilities
- Infiltrators attempting sabotage or theft
- Dangerous wildlife
- Malfunctioning alien technology

**Surface Threats** (Story-driven)
- Rival organizations
- Government inspections (must manage without violence)
- Late-game crisis events

**Internal Sabotage** (Rare)
- Possessed personnel from alien artifacts
- Low morale minions turning traitor

### Escalation Pattern

Threats become more frequent and dangerous as the game progresses. Early game sees minor incursions every few days; late game faces coordinated multi-vector attacks.

**Warning System**: Portal sensor upgrades provide 15-60 seconds advance warning with threat assessment. Surface threats offer minutes of preparation time.

---

## Alert System

Four customizable alert levels inspired by Evil Genius:

### Green - Normal Operations
Business as usual, guards patrol or hold positions.

### Yellow - Elevated Awareness
Guards take defensive positions, automated defenses power up but don't fire, non-combat personnel continue working.

### Orange - Active Threat
Guards engage intruders, civilians evacuate to safe zones, automated defenses activate, elevators prioritize security.

### Red - Emergency
All personnel can arm themselves, lockdown protocols seal sections, away teams may be recalled, self-destruct armed (late-game).

### Customizable Protocols

For each alert level, players configure:
- Guard behavior (hold position, aggressive pursuit, defend specific areas)
- Civilian response (work, evacuate, shelter, arm up)
- Facility actions (seal doors, cut power to sections)
- Automated defense targeting priorities

Configuration happens in Security Office. Quick presets available for common strategies.

---

## Guard Infrastructure

### Security Office
Central command hub. Required for protocol customization and coordinated responses. Displays security camera feeds and improves alert reaction times.

### Armory
Stores weapons and armor in three tiers (Earth/Hybrid/Alien tech). Guards auto-equip when alerts raised. Civilians can access during Red alert if permitted.

### Guard Posts
1x1 stations where guards are assigned. Provides cover bonus and improves local response time. Can link to automated defenses for manual control.

### Holding Cells
Contain captured infiltrators or possessed personnel. Interrogation yields intelligence about future threats.

---

## Automated Defenses

**Sentry Turrets**  
Wall or ceiling mounted. Auto-target hostiles at Orange alert and above. Require line-of-sight.

**Energy Barriers**  
Block doorways or corridors. Activate at configured alert level. Can channel enemies into kill zones or seal critical areas.

**Proximity Mines**  
One-time-use area denial. Crafted from resources. Risk of friendly fire.

**Advanced Sensors**  
Improve warning time and provide detailed threat intelligence. Track hostile movement through base.

**Camera Network**  
Breaks infiltrator stealth. Records incidents for review. Requires Security Office.

---

## Guard Behavior & AI

### Patrol Options

**Player-Defined Routes**: Click-and-drag waypoint system for precise control.

**Smart Patrol**: Guards automatically choose routes covering high-value areas.

**Station-Based**: Guards hold positions at Guard Posts, respond to nearby threats.

### Engagement Rules

Guards detect threats through line-of-sight, sound, or alerts from Security Office. Behavior varies by alert level:
- **Yellow**: Investigate but don't engage unless attacked
- **Orange**: Engage and pursue within limits
- **Red**: Engage and pursue until threat eliminated

Guards use cover, call reinforcements when outnumbered, and retreat if wounded (except during Red alert).

### Equipment

Guards require weapons to be effective in combat. They auto-equip from nearest Armory when threats detected. Without Armory access, guards use unarmed combat (very weak). Equipment quality (Earth/Hybrid/Alien tech) significantly affects combat effectiveness.

---

## Combat Resolution

Real-time combat system. Guards and enemies have health, damage, and defense stats. Guards use cover and coordinate when multiple units respond to same threat.

### Casualties

- Guards can be wounded, incapacitated, or killed
- Deaths are permanent and cause morale penalties
- Incapacitated hostiles can be captured for interrogation
- Civilian casualties cause severe morale damage

### Enemy Types

Range from basic hostiles to elite soldiers, stealthy infiltrators, and dangerous beasts. Each requires different tactical responses.

---

## Building Damage & Repair

### Damage States

Buildings take damage from stray fire and explosives. Progress through intact â†’ damaged â†’ heavily damaged â†’ destroyed states. Damaged buildings operate at reduced efficiency or may fail completely.

### Critical Impacts

- Destroyed Power Generators cause blackouts
- Damaged Life Support leads to oxygen depletion
- Portal Chamber damage prevents missions
- Destroyed Elevators block vertical movement

### Cascade Effects

Power and life support damage can cascade through connected systems, potentially forcing evacuation of entire layers.

### Repair

Workers automatically prioritize repairs during Green alert. Destroyed buildings must be fully reconstructed.

---

## Infiltration & Detection

**Infiltrators** are stealth units invisible to guards. They sabotage buildings, steal artifacts, or assassinate personnel.

### Detection Methods

- Security cameras (most reliable)
- Guard patrols (low chance)
- Advanced sensors (delayed tracking)

Counter-infiltration requires investment in detection infrastructure and frequent patrols.

---

## Strategic Considerations

### Defense in Depth

Place critical facilities on deeper layers. Create "security layers" between portal and important areas. Use elevator control to isolate threats.

### Resource Trade-offs

Heavy security means high operating costs (guard salaries, power for defenses). Under-defended bases face repair costs and casualties. Finding the balance is a core strategic decision.

### Guard vs. Automation

Guards are flexible but expensive (salaries, equipment). Automated defenses are fire-and-forget but require power and strategic placement. Optimal defense combines both.

### Alert Philosophy

Players choose between conservative (quick escalation, high security costs) and aggressive (accept more risk, lower costs) protocols. No single "correct" approach.

---

## Integration Points

**Layer System**: Enemies cannot move between layers without elevators. Strategic elevator placement creates defensive chokepoints.

**Personnel**: Heroes can be drafted during emergencies, much more effective than guards but risk injury affecting mission readiness.

**Research**: Security tech tree includes better weapons, armor, automated defenses, and detection systems.

**Power System**: Automated defenses are power-hungry. Power failures disable active defenses.

---

*The security system provides strategic depth through infrastructure choices and protocol customization while maintaining indirect control. Players prepare defenses and set rules, then watch their security forces execute during threats.*

---

### ðŸŸ¡ 7. Hero System Details

**Current State**: Hero classes and attributes defined, but many practical aspects missing.

**Open Questions**:

#### Roster Management
- **Starting Roster**:
  - How many heroes at game start?
  - Pre-generated characters or random?
  - Player choice in initial team composition?
- **Recruitment**:
  - How do you get new heroes?
  - Fixed story events?
  - Recruitment building?
  - Mission rewards?
  - Random arrivals?
- **Maximum Capacity**:
  - Hard cap on total heroes?
  - Soft cap (cost per additional hero)?
  - Quarters capacity limits hero count?

#### Progression Details
- **Experience System**:
  - XP per mission action or completion bonus?
  - Level-up thresholds (linear or exponential)?
  - Max level (20 mentioned, confirm)?
- **Skill Point Allocation**:
  - Points per level?
  - Can skills decrease or only increase?
  - Respec option?
  - Skill caps per level?
- **Training Facilities**:
  - Does Training Room accelerate progression?
  - Can heroes train between missions?
  - Training costs and time requirements?

#### Persistence and Loss
- **Permadeath**:
  - Optional setting or core design?
  - Difficulty mode selector?
  - Consequences of hero death (roster pressure)?
- **Injury Recovery**:
  - Healing time formula?
  - Medical Bay capacity limits?
  - Permanent injuries possible?
- **Trauma System**:
  - Psychological effects from missions?
  - PTSD-like mechanics?
  - Recovery methods?

#### Relationships
- **Mechanical Effects**:
  - Do relationships provide stat bonuses?
  - Team synergy bonuses?
  - Negative effects from conflicts?
- **Relationship Development**:
  - Automatic based on shared missions?
  - Player-influenced through choices?
  - Events triggered by relationship levels?

#### Equipment System
- **Acquisition**:
  - Found on missions?
  - Crafted from research?
  - Purchased with resources?
- **Durability**:
  - Does equipment degrade?
  - Maintenance requirements?
  - Permanent loss on mission failure?
- **Rarity and Power**:
  - Tier system (common/rare/legendary)?
  - Upgrade paths?
  - Set bonuses?

**Why This Is High Priority**: Heroes are player's primary investment. Unclear progression could frustrate players. Recruitment pipeline must be balanced with difficulty.

### ðŸŸ¡ 7.1 Hero System Details - Defined

## Roster Management

### Starting Roster
- 4 heroes at game start (one per class: Soldier, Engineer, Medic, Scout)
- Pre-generated with randomized stats

### Recruitment
- Recruitment Terminal building enables hiring
- Periodic candidate availability
- Player accepts or declines candidates
- New heroes start at level 1 with randomized stat distributions

### Roster Capacity
- Base capacity limit
- Expandable via Quarters upgrades
- Hard cap on total heroes

## Progression

### Experience & Leveling
- XP gained from mission completion and objectives
- Linear level progression
- Max level cap

### Skill Points
- One skill point awarded per level
- Allocate to core stats: Accuracy, Health, Speed, Tech
- Permanent allocation (no respec)
- No per-level skill caps

### Training Room (Optional)
- Heroes gain passive XP when not on missions
- Requires Energy to operate
- Limited capacity

## Health & Recovery

### Permadeath
- Default enabled
- Toggleable difficulty setting
- Heroes reaching 0 HP are KIA (if enabled) or critically wounded (if disabled)

### Injury Recovery
- Wounded heroes require time in Medical Bay
- Medical Bay has capacity limit
- Full recovery after waiting period
- No permanent injuries

## Equipment

### Acquisition
- Crafted via Research Tree
- Occasionally found as mission rewards

### Equipment Types
- Weapons
- Armor
- Tools (class-specific)
- One weapon + one armor per hero

### Tiers
- Basic (starting gear)
- Advanced (mid-game research)
- Elite (late-game research)
- Higher tiers provide stat bonuses
- No durability or degradation

## Mission Deployment

### Assignment
- Missions require 2-4 heroes depending on type
- Heroes must be available (not injured or training)
- Deployed heroes unavailable until mission completes
- Pre-mission loadout selection from available equipment

## Excluded Mechanics
- No relationship/morale systems
- No psychological effects or trauma
- No equipment durability or maintenance
- No inter-hero synergies or conflicts

---

### ðŸŸ¡ 8. Minion Behavior and Management

**Current State**: Types defined, autonomous behavior mentioned, but task system details missing.

**Open Questions**:

#### Task Assignment
- **Priority Algorithm**:
  - How do minions choose tasks from available queue?
  - Proximity-based (nearest task)?
  - Skill-matched (best qualified)?
  - Priority tags (critical first)?
  - Personal preferences based on morale?
- **Manual Override**:
  - Can players force-assign specific minion to task?
  - Temporary or permanent assignment?
  - Consequences of forced assignment (morale)?
- **Task Types**:
  - Construction
  - Maintenance
  - Operation (lab work, generator oversight)
  - Hauling
  - Cleaning/morale tasks?
  - What else?

#### Workforce Management
- **Recruitment**:
  - How do you get more minions?
  - Automatic population growth?
  - Recruitment room/event required?
  - Cost per minion?
- **Population Cap**:
  - Quarters capacity = max minions?
  - Soft cap (efficiency loss) or hard cap?
  - Food consumption limits population?
- **Specialization**:
  - Are minions locked to type (worker/technician/etc.)?
  - Can they be retrained?
  - Skill progression for minions?

#### Shift System
- **24/7 Operations**:
  - Do minions work in shifts?
  - Player-defined schedules or automatic?
  - Night shift efficiency penalties?
- **Rest Requirements**:
  - Sleep needs?
  - Break rooms/cafeteria visits?
  - Fatigue mechanic?
- **Coverage Problems**:
  - What if insufficient staff for 24/7 coverage?
  - Critical system shutdowns?
  - Player notification?

#### Morale System
- **Morale Factors**:
  - Base factors: food, quarters quality, workload
  - Events: deaths, attacks, mission failures
  - Positive factors: recreation, success, bonuses
- **Low Morale Consequences**:
  - Efficiency reduction (quantified how much)?
  - Work refusal/strikes?
  - Desertion?
  - Sabotage?
- **Morale Recovery**:
  - Time-based healing?
  - Cafeteria/recreation benefits?
  - Player actions (speeches, bonuses)?

#### Death and Replacement
- **Minion Mortality**:
  - Can minions die?
  - From what causes (combat, accidents, life support)?
  - Permanent loss or respawn?
- **Impact of Losses**:
  - Morale penalty to survivors?
  - Skill/experience lost?
  - Replacement recruitment time?

**Why This Is High Priority**: Minions are the workforce that makes everything function. Autonomous behavior must be predictable enough that players can plan, but not micromanagement-heavy.

### ðŸŸ¡ 8.1 Minion Behavior and Management - Defined

## Overview
Minions are autonomous workers who automatically select and perform tasks based on availability and skill match. No direct control of individual minions.

## Minion Types

### Worker
- Construction and building
- Basic maintenance
- Hauling materials and resources
- General labor

### Technician
- Research lab operation
- Equipment maintenance
- Power system operation
- Advanced repairs

### Guard
- Base defense
- Patrol routes
- Respond to intrusions
- Protect critical facilities

## Task Assignment (Autonomous)

### Task Priority System
- Minions automatically select tasks from queue
- Priority factors:
  - Task urgency (critical systems first)
  - Skill match (technicians prefer tech tasks)
  - Proximity (nearest available task)
- No manual assignment or micromanagement

### Task Types
- Construction (building new rooms)
- Maintenance (repairing damaged facilities)
- Operation (running labs, generators, etc.)
- Hauling (moving resources)
- Defense (guards only)

## Recruitment & Population

### Recruitment
- Recruitment Terminal building enables hiring
- Periodic arrival of new minions
- Player specifies desired minion type
- New minions arrive over time

### Population Capacity
- Quarters determines maximum minion population
- Hard cap enforced by quarters capacity
- Insufficient quarters prevents new recruitment

## Needs & Morale

### Basic Needs
- Sleep (quarters)
- Food (cafeteria)
- Recreation (break rooms, entertainment)
- Minions autonomously fulfill needs when required

### Morale Factors
**Positive:**
- Adequate food and quarters
- Recreation facilities available
- Mission successes
- Well-maintained base

**Negative:**
- Poor living conditions
- Insufficient food or rest facilities
- Minion deaths
- Base attacks
- Mission failures

### Low Morale Effects
- Reduced work efficiency
- Slower task completion
- Increased chance of errors
- Potential desertion at critically low morale

## Work Shifts

### Shift System
- Minions work in automatic shifts
- Rest when fatigued (return to quarters)
- Eat when hungry (visit cafeteria)
- No player-defined schedules

### Coverage
- Ensure sufficient minion population for 24/7 operations
- Insufficient staff leads to task backlogs
- Critical systems may idle if unstaffed

## Death & Replacement

### Mortality
- Minions can die from:
  - Enemy attacks during base defense
  - Life support failures
  - Combat missions (if assigned)
- Permanent loss (no respawn)

### Impact
- Morale penalty to surviving minions
- Loss of workforce capacity
- Must recruit replacements to restore numbers

## Key Design Principles
- Autonomous behavior (no micromanagement)
- Collective workforce (not individual management)
- Player focuses on infrastructure and capacity
- Morale is base-wide, not per-minion
- Simple, predictable behavior patterns
---

### ðŸŸ¡ 9. Life Support System

**Current State**: To be removed from the GDD

---

### ðŸŸ¡ 10. Research Mechanics

**Current State**: Tech tree structure defined, but research execution details missing.

**Open Questions**:

#### Research Execution
- **Failure Possibility**:
  - Can research projects fail?
  - Partial progress lost or total loss?
  - Consequences (damaged lab, injured scientists)?
  - Retry allowed or tech locked out?
- **Breakthrough System**:
  - Random chance for breakthrough?
  - Skill-based (higher scientist skill = better chance)?
  - Triggered by events/discoveries?
  - Benefits (skip tiers, bonus tech, faster completion)?
- **Multiple Lab Benefits**:
  - Can multiple labs work on one project?
  - Parallel research on different projects?
  - Efficiency bonus from specialized labs?

#### Resource Requirements
- **Artifact Consumption**:
  - Are artifacts consumed when used for research?
  - Or studied indefinitely (permanent library)?
  - Rare artifacts as one-time-use vs. common as permanent?
- **Resource Costs**:
  - Do research projects consume supplies?
  - Exotic materials required for advanced tech?
  - Ongoing costs or one-time?
- **Scientist Allocation**:
  - How many scientists per project?
  - Can scientists multi-task?
  - Diminishing returns on too many scientists?

#### Progress and Time
- **Progress Calculation**:
  - Scientist skill affects speed (formula)?
  - Equipment quality bonuses?
  - Morale effects on research speed?
- **Interruption Handling**:
  - Can research be paused and resumed?
  - Progress lost during interruption?
  - Consequences of reassigning scientists mid-project?
- **Time Estimates**:
  - Are displayed times accurate predictions?
  - Variability based on scientist performance?
  - Player notification when nearly complete?

#### Ethical Choices
- **Specific Scenarios**:
  - Human experimentation options?
  - Dangerous technology warnings?
  - Moral consequences tracked?
- **Mechanical Effects**:
  - Does choosing unethical research have gameplay effects?
  - Morale penalties?
  - Faction reputation changes?
  - Alternative tech paths based on ethics?

**Why This Is High Priority**: Research drives long-term progression and unlocks new capabilities. Must be engaging without being tedious. Ethical choices need meaningful consequences.

### ðŸŸ¡ 10.1 Research Mechanics - Defined

## Research Execution

### Research Projects
- Select project from available tech tree
- Projects require Research Points to complete
- Only one active project at a time
- Projects can be paused and resumed without penalty
- No failure chance (research always progresses when staffed)

### Research Labs
- Each lab generates Research Points per day when staffed
- Multiple labs accelerate research (cumulative RP generation)
- Scientists assigned to labs produce RP based on their skill level
- Unstaffed labs produce no research

### Breakthrough Events (Optional)
- Random chance for breakthrough on project completion
- Grants bonus follow-up project at reduced cost
- Higher scientist skill increases breakthrough chance
- Purely beneficial (no negative outcomes)

## Resource Requirements

### Research Costs
- **Research Points:** Primary currency, generated by staffed labs
- **Materials:** Some advanced projects require material costs
- **Artifacts:** Certain projects require specific artifacts to unlock

### Artifact Usage
- Artifacts are permanent resources (not consumed)
- Once acquired, artifact enables related research indefinitely
- Rare artifacts unlock unique tech branches
- Common artifacts unlock standard upgrades

### Scientist Assignment
- Scientists automatically assigned to available labs
- Many scientists per lab
- Scientist skill level affects RP generation rate
- Reassigning scientists does not lose project progress

## Progress & Time

### Progress Calculation
- Research Points accumulated per day
- Project complete when RP threshold reached
- Progress bar shows completion percentage
- Estimated time displayed based on current RP generation rate

### Speed Factors
- Scientist skill (higher skill = more RP/day)
- Number of active labs
- Lab equipment tier (upgraded labs = bonus RP)

### Interruptions
- Projects retain all progress if paused
- Can switch projects at any time
- Previous project saves progress for later resumption
- No penalties for changing priorities

## Ethical Choices

### Research Branches
Some advanced technologies present ethical choices that unlock different paths:

**Example: Genetic Enhancement**
- Path A: Therapeutic applications (safer, slower benefits)
- Path B: Combat modifications (powerful, potential consequences)
- Choice unlocks different follow-up technologies
- No "wrong" choice, but different gameplay implications

**Example: AI Development**
- Path A: Limited AI (restricted capabilities, safe)
- Path B: Advanced AI (powerful systems, narrative risks)

### Consequences
- Ethical choices are narrative flavor
- Unlock different tech branches (not better/worse, just different)
- No morale penalties or reputation tracking
- Player decides their base's philosophy through choices

## Key Design Principles
- Straightforward accumulation (no RNG failures)
- Clear progress visibility
- Flexible project management
- Artifacts are permanent unlocks
- Ethical choices provide variety, not punishment
- Multiple labs = faster research (simple scaling)

---

## Medium Priority Gaps

### ðŸŸ¢ 11. Pathfinding Edge Cases

**Current State**: A* mentioned, elevator-aware routing described, but edge cases undefined.

**Questions**:
- **Diagonal Movement**: Allowed? Cost same as cardinal movement or sqrt(2)?
- **Elevator Queues**: How does pathfinding handle multiple units wanting same elevator?
- **Multi-Unit Collision**: Do units block each other or phase through?
- **Emergency Evacuation**: Does pathfinding prioritize safety during life support failure?
- **Dynamic Obstacles**: Construction sites block paths? Damaged rooms?
- **Multi-Layer Paths**: How does algorithm weight vertical movement vs. horizontal distance?

**Recommendation**: Test with prototype and define behavior based on emergent issues.

---

### ðŸŸ¢ 12. Grid and Building Details

**Questions**:
- **Room Rotation**: Can buildings be rotated during placement?
- **Non-Rectangular Rooms**: L-shapes or irregular rooms possible?
- **Doorway System**: Explicit door placement or automatic connections?
- **Overlapping Layers**: Can buildings on Layer 0 occupy same tile as Layer -1 building?
- **Half-Tiles**: Rooms require integer tile dimensions or fractional possible?
- **Elevation Details**: Do rooms have floor/ceiling that interact with layers above/below?

**Recommendation**: Start with rectangular rooms only, no rotation, for MVP. Expand if needed.

---

### ðŸŸ¢ 13. Economic Model

**Questions**:
- **Currency Existence**: Is there a money/credit system or just resources?
- **Budget System**: Are supplies purchased with budget or time-gated deliveries?
- **Portal Trade**: Can you trade with aliens for resources?
- **Exotic Material Value**: Can exotic materials be sold/traded?
- **Mission Rewards**: Do missions provide currency or just artifacts/materials?
- **Operating Costs**: Ongoing costs for personnel, power, etc.?

**Recommendation**: Define whether currency exists before implementing resource delivery system.

---

### ðŸŸ¢ 14. Progression Structure

**Questions**:
- **Layer Unlocking**: What unlocks deeper layers? Research? Story? Just excavation?
- **Building Progression**: Which buildings available at start? Unlock order?
- **Campaign Structure**: Linear missions or open-ended sandbox?
- **Victory Conditions**: What ends the game? Final mission? Research completion? Score threshold?
- **Loss Conditions**: Can you lose? How? (Total base destruction? Economic collapse? Story failure?)
- **New Game Plus**: Post-victory options? Endless mode transitions?

**Recommendation**: Define victory/loss conditions early as they affect design philosophy. Campaign structure can evolve.

---

### ðŸŸ¢ 15. Tutorial and Onboarding

**Current State**: Completely unaddressed.

**Critical Questions**:
- **Tutorial Structure**: Guided missions? Interactive tooltips? Separate tutorial mode?
- **Feature Gating**: Are advanced features locked initially and progressively revealed?
- **First-Time User Experience**: How does game teach multi-layer navigation?
- **Complexity Curve**: What order are systems introduced?
- **Help System**: In-game encyclopedia? Context-sensitive help?
- **Difficulty Scaling**: Does tutorial difficulty match campaign?

**Recommendation**: Design tutorial as high priority item. Complex games need strong onboarding. Consider progressive feature unlocking to avoid overwhelming new players.

---

### ðŸŸ¢ 16. Content Volume Targets

**Questions**:
- **Mission Types**: How many unique mission templates? (10? 50? 100?)
- **Building Variety**: Total number of building types by launch?
- **Hero Classes**: Final class count? (6 mentioned, is that final?)
- **Tech Tree Size**: How many technologies total? Per category?
- **Random Events**: Pool size for mission and base events?
- **Alien Species**: How many factions/species to design?
- **Equipment Items**: Total weapons, armor, tools, consumables?

**Recommendation**: Set content targets to guide art and design team workload. Ensure targets align with development timeline.

---

### ðŸŸ¢ 17. Save/Load System

**Questions**:
- **Save Format**: Binary or text-based (JSON)?
- **Autosave Frequency**: Every X minutes? On major events?
- **Mid-Mission Saving**: Can you save during active missions?
- **Save Slots**: How many? Cloud sync?
- **Corruption Handling**: Backup saves? Error recovery?
- **Version Compatibility**: How to handle saves across game updates?
- **Data Volume**: Estimate save file size for performance planning?

**Recommendation**: Design save system architecture early to ensure all game state is serializable.

---

### ðŸŸ¢ 18. UI Interaction Details

**Questions**:
- **Building Cancellation**: Refund policy? Full refund, partial, none?
- **Order Queuing**: Can players queue multiple commands? Shift-click?
- **Multi-Select**: Select multiple units at once?
- **Undo System**: Can placement mistakes be undone?
- **Hotkeys**: Full keyboard shortcut scheme?
- **Mouse Gestures**: Edge scrolling speed? Click-drag sensitivity?

**Recommendation**: Define cancellation policy before implementing building system. Other details can be refined during alpha testing.

---

### ðŸŸ¢ 19. Performance Budgets

**Questions**:
- **Max Units per Layer**: Performance target? 50? 100? 500?
- **Max Buildings per Layer**: Realistic base size limit?
- **Total Layers Rendered**: How many layers visible/processed simultaneously?
- **Particle Effect Limits**: Max concurrent particle systems?
- **Pathfinding Budget**: Max path recalculations per frame?
- **Draw Call Budget**: Target for rendering optimization?
- **Memory Target**: Max RAM usage?

**Recommendation**: Set performance targets early to guide optimization priorities. Adjust based on profiling.

---

### ðŸŸ¢ 20. Time Scale

**Questions**:
- **Real-Time to Game-Time**: 1 real minute = ? game minutes?
- **Day/Night Cycle**: Does time of day affect gameplay?
- **Long-Term Time**: Do months/years matter?
- **Personnel Aging**: Do minions/heroes age over time?
- **Resource Consumption**: Per real-time or game-time?
- **Mission Duration**: Real-time or can be accelerated with game speed?

**Recommendation**: Define time scale to calibrate all time-based systems (construction, research, consumption, mission duration).

---

## Medium Priority Gaps - Defined

## Pathfinding System

### Movement
- 8-directional movement (cardinal + diagonal)
- Units phase through each other (no collision)
- Simple pathfinding with A* algorithm

### Elevators
- First-come-first-served priority
- Nearest unit gets priority when multiple units waiting
- No complex queuing system

### Obstacles
- Construction sites and blueprints block paths
- Damaged rooms may block paths
- Dynamic re-routing when paths blocked

## Building and Room System

### Room Creation
- Player excavates custom shapes in rock/terrain
- Freeform room shapes (Evil Genius style)
- Rooms are empty containers until populated with objects

### Object Placement
- Objects placed freely within excavated rooms
- Objects provide functionality (not the room itself)
- Blueprint mode: place objects instantly, minions construct later
- Can move, refund, or delete objects anytime
- Moving/deleting requires minion interaction (crate and relocate)

### Object Categories
- **Furniture:** Beds, desks, chairs (living quarters, comfort)
- **Terminals:** Computers, control stations (operations)
- **Workstations:** Research labs, engineering benches
- **Holding Cells:** Prisoner containment
- **Weapon Racks:** Armory storage
- **Doors:** Access control between rooms
- **Defenses:** Turrets, traps, security systems
- **Decorations:** Aesthetic items for morale

## Economic System

### Currency
- **Cash** is the only tracked currency
- Regular income from stakeholders/funding (periodic payments)
- Cash purchases supply crates

### Supply Crates
- Abstracted construction materials
- Automatically arrive at intervals when purchased
- Minions deliver crates to blueprint locations
- Limited storage capacity (expandable with Storerooms)

### Energy System
- Energy is a **capacity check** (not consumed)
- Power generation vs power consumption
- Insufficient power causes system shutdowns
- Not purchased with cash (generated by reactors/generators)

## Progression Structure

### Campaign Mode
- Main story missions provide structure
- Sandbox elements between story beats
- Missions unlock new technologies and layers

### Victory Conditions
- Complete final story mission
- OR reach prestige/achievement milestones

### Loss Conditions
- Critical base failures (total destruction, life support collapse)
- Story mission failures (specific scenarios)

### Layer Unlocking
- Deeper layers unlocked through research
- Excavation technology progression
- Story gates for certain depths

## Save/Load System

### Save Format
- JSON text-based (human-readable, easier debugging)
- Autosave every 5 minutes
- Autosave between missions
- 10 save slots (local storage)

### Save Restrictions
- Cannot save during active combat in missions
- Can save anytime in base management mode

### Data Protection
- One backup save maintained
- Best-effort version compatibility across updates
- Corruption recovery via backup

## UI Interaction

### Construction System
- Place objects as blueprints (instant, free placement)
- Blueprints become construction sites requiring supplies
- Minions deliver crates to complete construction

### Object Management
- Move objects: minions crate and relocate
- Delete objects: minions crate and store (partial refund)
- Refund objects: partial resource return

### Player Controls
- Blueprint mode for planning
- Click to place, drag to move
- Right-click to cancel/delete
- Speed controls: Pause, 1x, 2x, 3x

## Performance Targets

### Technical Goals
- Lightweight art style enabling high entity counts
- Target 60+ FPS on mid-range hardware
- Scalable graphics settings for various systems

### Optimization Priorities
- Efficient pathfinding for many units
- Multi-layer rendering optimization
- Specific performance budgets TBD after prototyping

## Time Scale

### Game Time
- 1 real second = 1 game minute
- 1 real minute = 1 game hour
- 24 real minutes = 1 full day/night cycle

### Day/Night Cycle
- Affects lighting and atmosphere
- Does not affect gameplay mechanics
- Visual feedback for time passage

### Time Controls
- Pause: freeze all activity
- 1x: normal speed
- 2x: double speed
- 3x: triple speed
- Missions run at selected game speed

### Long-Term Time
- No personnel aging
- No season/year mechanics
- Time progression measured in days for construction/research

## Content Development Philosophy

### Initial Goals
- Establish all core mechanics first
- Minimal viable content for each system
- Prove gameplay loops before content expansion

### Expansion Strategy
- Add content volume after mechanics validated
- Iterative content additions post-launch
- Modular design for easy content updates
