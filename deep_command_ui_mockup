import React, { useState } from 'react';
import { Map, Users, Wrench, FlaskConical, Shield, AlertCircle, Play, Pause, FastForward, ZapOff, Heart, Package, Syringe, ChevronUp, ChevronDown, Clock, Save, Menu } from 'lucide-react';

const DeepCommandUI = () => {
  const [activeTab, setActiveTab] = useState('build');
  const [gameSpeed, setGameSpeed] = useState(1);
  const [isPaused, setIsPaused] = useState(false);
  const [currentLayer, setCurrentLayer] = useState(0);
  const [missionActive, setMissionActive] = useState(true);

  const resources = [
    { icon: ZapOff, label: 'Power', current: 450, max: 600, rate: -15, color: 'text-yellow-400' },
    { icon: Package, label: 'Supplies', current: 1250, max: 2000, rate: -5, color: 'text-gray-400' },
    { icon: Heart, label: 'Food', current: 380, max: 500, rate: -8, color: 'text-green-400' },
    { icon: Syringe, label: 'Medical', current: 120, max: 200, rate: -2, color: 'text-red-400' },
  ];

  const buildingCategories = [
    { id: 'infrastructure', icon: Wrench, label: 'Infrastructure' },
    { id: 'operational', icon: Users, label: 'Operational' },
    { id: 'research', icon: FlaskConical, label: 'Research' },
    { id: 'security', icon: Shield, label: 'Security' }
  ];

  const layers = Array.from({ length: 20 }, (_, i) => i === 0 ? 0 : -i);

  return (
    <div className="w-full h-screen bg-gradient-to-br from-amber-900 via-amber-800 to-amber-900 flex flex-col relative overflow-hidden font-sans">
      {/* Top Left - Minimap */}
      <div className="absolute top-4 left-4 w-64 bg-gray-800/90 border-2 border-gray-600 rounded-lg shadow-2xl">
        <div className="p-2 border-b border-gray-600 flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Map className="w-4 h-4 text-blue-400" />
            <span className="text-xs font-bold text-gray-300">MINIMAP</span>
          </div>
          <span className="text-xs font-mono text-blue-400">Layer {currentLayer}</span>
        </div>
        <div className="aspect-square bg-gray-900/50 m-2 rounded border border-gray-700 relative">
          {/* Minimap content */}
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="w-3/4 h-3/4 border border-blue-500/50 bg-blue-900/20"></div>
          </div>
          {/* Elevator markers */}
          <div className="absolute top-1/4 left-1/4 w-2 h-2 bg-yellow-400 rounded-full animate-pulse"></div>
          <div className="absolute bottom-1/4 right-1/4 w-2 h-2 bg-yellow-400 rounded-full animate-pulse"></div>
        </div>
        <div className="p-2 space-y-1">
          <button className="w-full text-xs bg-gray-700 hover:bg-gray-600 text-gray-300 py-1 px-2 rounded transition">
            Grid Overlay
          </button>
          <button className="w-full text-xs bg-gray-700 hover:bg-gray-600 text-gray-300 py-1 px-2 rounded transition">
            Show Elevators
          </button>
        </div>
      </div>

      {/* Layer Navigator */}
      <div className="absolute top-4 left-72 bg-gray-800/90 border-2 border-gray-600 rounded-lg shadow-2xl p-2">
        <div className="text-xs font-bold text-gray-300 mb-2 text-center">LAYERS</div>
        <div className="flex flex-col gap-1 max-h-48 overflow-y-auto custom-scrollbar">
          {layers.map((layer) => (
            <button
              key={layer}
              onClick={() => setCurrentLayer(layer)}
              className={`px-3 py-1 text-xs font-mono rounded transition ${
                layer === currentLayer
                  ? 'bg-blue-600 text-white'
                  : layer > currentLayer - 3
                  ? 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                  : 'bg-gray-800 text-gray-500'
              }`}
            >
              {layer === 0 ? 'Surface' : `L ${layer}`}
            </button>
          ))}
        </div>
      </div>

      {/* Right Sidebar */}
      <div className="absolute top-4 right-4 bottom-20 w-80 bg-gray-800/90 border-2 border-gray-600 rounded-lg shadow-2xl flex flex-col">
        {/* Tab Navigation */}
        <div className="flex border-b border-gray-600">
          {[
            { id: 'build', icon: Wrench, label: 'Build' },
            { id: 'personnel', icon: Users, label: 'Personnel' },
            { id: 'missions', icon: AlertCircle, label: 'Missions' },
            { id: 'research', icon: FlaskConical, label: 'Research' }
          ].map(tab => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`flex-1 py-2 px-3 flex items-center justify-center gap-2 transition ${
                activeTab === tab.id
                  ? 'bg-gray-700 text-blue-400'
                  : 'text-gray-400 hover:bg-gray-700/50'
              }`}
            >
              <tab.icon className="w-4 h-4" />
              <span className="text-xs font-bold">{tab.label}</span>
            </button>
          ))}
        </div>

        {/* Tab Content */}
        <div className="flex-1 overflow-y-auto custom-scrollbar p-3">
          {activeTab === 'build' && (
            <div className="space-y-3">
              <div className="text-xs font-bold text-gray-300 mb-2">BUILD MENU</div>
              <div className="grid grid-cols-2 gap-2">
                {buildingCategories.map(cat => (
                  <button
                    key={cat.id}
                    className="bg-gray-700 hover:bg-gray-600 p-3 rounded flex flex-col items-center gap-2 transition"
                  >
                    <cat.icon className="w-6 h-6 text-blue-400" />
                    <span className="text-xs text-gray-300">{cat.label}</span>
                  </button>
                ))}
              </div>
              
              <div className="mt-4 border-t border-gray-600 pt-3">
                <div className="text-xs font-bold text-gray-400 mb-2">INFRASTRUCTURE</div>
                <div className="space-y-2">
                  {['Command Center', 'Power Generator', 'Life Support', 'Quarters', 'Elevator'].map(room => (
                    <button key={room} className="w-full bg-gray-700 hover:bg-gray-600 p-2 rounded text-left transition">
                      <div className="text-xs font-bold text-gray-300">{room}</div>
                      <div className="text-xs text-gray-500 mt-1">
                        Cost: 50 Supplies • 10s
                      </div>
                    </button>
                  ))}
                </div>
              </div>
            </div>
          )}

          {activeTab === 'personnel' && (
            <div className="space-y-3">
              <div className="text-xs font-bold text-gray-300 mb-2">PERSONNEL</div>
              <div className="flex gap-2 mb-3">
                <button className="flex-1 bg-blue-600 text-white text-xs py-1 px-2 rounded">
                  Minions (24)
                </button>
                <button className="flex-1 bg-gray-700 text-gray-300 text-xs py-1 px-2 rounded">
                  Heroes (6)
                </button>
              </div>
              
              {[1, 2, 3, 4, 5].map(i => (
                <div key={i} className="bg-gray-700 p-2 rounded flex items-center gap-3">
                  <div className="w-10 h-10 bg-gray-600 rounded flex items-center justify-center">
                    <Users className="w-5 h-5 text-gray-400" />
                  </div>
                  <div className="flex-1">
                    <div className="text-xs font-bold text-gray-300">Worker #{i}</div>
                    <div className="text-xs text-gray-500">Layer {-i} • Excavating</div>
                    <div className="w-full bg-gray-600 h-1 rounded mt-1">
                      <div className="bg-green-500 h-1 rounded" style={{width: `${60 + i * 10}%`}}></div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}

          {activeTab === 'missions' && (
            <div className="space-y-3">
              <div className="text-xs font-bold text-gray-300 mb-2">AVAILABLE MISSIONS</div>
              {[
                { name: 'Salvage Operation', difficulty: 'Medium', time: '25 min' },
                { name: 'First Contact', difficulty: 'High', time: '40 min' },
                { name: 'Resource Survey', difficulty: 'Low', time: '15 min' }
              ].map((mission, i) => (
                <div key={i} className="bg-gray-700 p-3 rounded">
                  <div className="text-xs font-bold text-gray-300">{mission.name}</div>
                  <div className="flex justify-between mt-2 text-xs text-gray-500">
                    <span>Difficulty: {mission.difficulty}</span>
                    <span>~{mission.time}</span>
                  </div>
                  <button className="w-full mt-2 bg-blue-600 hover:bg-blue-500 text-white text-xs py-1 rounded transition">
                    Plan Mission
                  </button>
                </div>
              ))}
            </div>
          )}

          {activeTab === 'research' && (
            <div className="space-y-3">
              <div className="text-xs font-bold text-gray-300 mb-2">ACTIVE RESEARCH</div>
              <div className="bg-gray-700 p-3 rounded">
                <div className="text-xs font-bold text-gray-300">Advanced Power Systems</div>
                <div className="w-full bg-gray-600 h-2 rounded mt-2">
                  <div className="bg-purple-500 h-2 rounded" style={{width: '65%'}}></div>
                </div>
                <div className="flex justify-between mt-2 text-xs text-gray-500">
                  <span>Scientists: 2</span>
                  <span>~8:30 remaining</span>
                </div>
              </div>
              
              <div className="text-xs font-bold text-gray-300 mt-4 mb-2">AVAILABLE</div>
              {['Alien Biology', 'Energy Weapons', 'Portal Science'].map((tech, i) => (
                <div key={i} className="bg-gray-700 p-2 rounded">
                  <div className="text-xs font-bold text-gray-300">{tech}</div>
                  <button className="w-full mt-2 bg-purple-600 hover:bg-purple-500 text-white text-xs py-1 rounded transition">
                    Start Research
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Active Mission Panel */}
      {missionActive && (
        <div className="absolute top-4 right-[22rem] w-72 bg-gray-800/95 border-2 border-orange-600 rounded-lg shadow-2xl">
          <div className="p-2 border-b border-orange-600 flex items-center justify-between">
            <span className="text-xs font-bold text-orange-400">ACTIVE MISSION</span>
            <button 
              onClick={() => setMissionActive(false)}
              className="text-xs text-gray-400 hover:text-white"
            >
              ✕
            </button>
          </div>
          <div className="p-3 space-y-2">
            <div className="text-sm font-bold text-gray-300">Salvage Operation</div>
            <div className="flex items-center gap-2 text-xs text-gray-400">
              <Clock className="w-3 h-3" />
              <span>18:34 elapsed</span>
            </div>
            <div className="flex gap-1">
              {[85, 92, 78, 100, 65, 88].map((health, i) => (
                <div key={i} className="flex-1">
                  <div className="w-full bg-gray-700 h-1 rounded">
                    <div 
                      className={`h-1 rounded ${health > 75 ? 'bg-green-500' : health > 40 ? 'bg-yellow-500' : 'bg-red-500'}`}
                      style={{width: `${health}%`}}
                    ></div>
                  </div>
                </div>
              ))}
            </div>
            <div className="bg-gray-700 p-2 rounded text-xs text-gray-300">
              <span className="text-blue-400">Status:</span> Team investigating structure. Energy readings detected.
            </div>
            <button className="w-full bg-red-600 hover:bg-red-500 text-white text-xs py-1 rounded transition">
              Emergency Recall
            </button>
          </div>
        </div>
      )}

      {/* Main Viewport Area */}
      <div className="flex-1 flex items-center justify-center">
        <div className="text-gray-600 text-xl font-bold">GAME VIEWPORT</div>
      </div>

      {/* Bottom Bar */}
      <div className="h-16 bg-gray-900/95 border-t-2 border-gray-600 flex items-center justify-between px-4">
        {/* Resources */}
        <div className="flex gap-4">
          {resources.map((resource, i) => (
            <div key={i} className="flex items-center gap-2">
              <resource.icon className={`w-4 h-4 ${resource.color}`} />
              <div className="text-xs">
                <div className="font-mono font-bold text-gray-300">
                  {resource.current}/{resource.max}
                </div>
                <div className={`font-mono text-xs ${resource.rate < 0 ? 'text-red-400' : resource.rate > 0 ? 'text-green-400' : 'text-gray-500'}`}>
                  {resource.rate > 0 ? '+' : ''}{resource.rate}/min
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Time Controls */}
        <div className="flex items-center gap-3">
          <button
            onClick={() => setIsPaused(!isPaused)}
            className={`p-2 rounded transition ${isPaused ? 'bg-yellow-600 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}`}
          >
            {isPaused ? <Play className="w-4 h-4" /> : <Pause className="w-4 h-4" />}
          </button>
          {[1, 2, 3].map(speed => (
            <button
              key={speed}
              onClick={() => setGameSpeed(speed)}
              className={`px-3 py-2 rounded text-xs font-bold transition flex items-center gap-1 ${
                gameSpeed === speed ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
              }`}
            >
              {speed > 1 && <FastForward className="w-3 h-3" />}
              {speed}x
            </button>
          ))}
          <div className="ml-3 text-xs font-mono text-gray-400">
            Day 45 • 14:32
          </div>
        </div>

        {/* Layer Quick Nav & Menu */}
        <div className="flex items-center gap-3">
          <div className="flex items-center gap-2 bg-gray-800 px-3 py-1 rounded">
            <button
              onClick={() => setCurrentLayer(Math.min(0, currentLayer + 1))}
              className="text-gray-400 hover:text-white transition"
            >
              <ChevronUp className="w-4 h-4" />
            </button>
            <span className="text-xs font-mono text-blue-400 w-12 text-center">
              L {currentLayer}
            </span>
            <button
              onClick={() => setCurrentLayer(Math.max(-19, currentLayer - 1))}
              className="text-gray-400 hover:text-white transition"
            >
              <ChevronDown className="w-4 h-4" />
            </button>
          </div>
          <button className="p-2 bg-gray-700 hover:bg-gray-600 rounded transition">
            <Save className="w-4 h-4 text-gray-300" />
          </button>
          <button className="p-2 bg-gray-700 hover:bg-gray-600 rounded transition">
            <Menu className="w-4 h-4 text-gray-300" />
          </button>
        </div>
      </div>

      <style jsx>{`
        .custom-scrollbar::-webkit-scrollbar {
          width: 6px;
        }
        .custom-scrollbar::-webkit-scrollbar-track {
          background: rgba(55, 65, 81, 0.5);
          border-radius: 3px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb {
          background: rgba(107, 114, 128, 0.8);
          border-radius: 3px;
        }
        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
          background: rgba(156, 163, 175, 0.8);
        }
      `}</style>
    </div>
  );
};

export default DeepCommandUI;
